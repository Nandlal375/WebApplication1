basic c# tutorial 

 ArgumentNullException == Value cannot be null. Parameter name: String
 FormatException == Input string was not in a correct format.
 NullReferenceException == Object reference not set to an instance of an object.
 IndexOutOfRangeException == Index was outside the bounds of the array.
 
 Object --> Exception --> 
 
 1.Exception Devided two part
   1.1 System Exception
   1.2 Application Exception
  
1.1 System Exception
    1.1.1 ExternalExecption
    1.1.1.1 ComExecption
    1.1.2 AggregateExecption
    1.1.3 ArgumentExection
    1.1.4 DividedbyZeroException
    1.1.5 NullReferenceException
    1.1.6 OverflowExection

1.1.4 ArgumentExection
      1.1.4.1 ArgumentNullException
      1.1.4.2 ArgumentOutOfRangeException


2. Finally Block ==> finally Block in c# can be used to put cleanup code such as closing a file closing connection etc.	 
 
3. Throw Keyword ==> this keyword is use of generate own throw message. (for like Exception Message)

4. Partial Class ==> It provided a special ability to implement the functionality of a single class into multiple files and all these files are combined into a single class 
                     file when the application is compiled.
					 
5.Param Keyword ==> Params is an important keyword in C#. It is used as a parameter which can take the variable number of arguments. 
                    Important Point About Params Keyword : It is useful when programmer don't have any prior knowledge about the number of parameters to be used.

6.Multithreading ==> Multithreading in C# is a process in which multiple threads work simultaneously. It is a process to achieve multitasking. 
                     It saves time because multiple tasks are being executed at a time. 
					 To create multithreaded application in C#, we need to use System.Threding namespace.		

7.Extension Method ==> In C#, the extension method concept allows you to add new methods in the existing class or in the structure 
                       without modifying the source code of the original type and you do not require any kind of special permission from the original type and 
                       there is no need to re-compile the original type.
					 
8.Structure In c# ==> Structure is a value type and a collection of variables of different data types under a single unit. 
                      It is almost similar to a class because both are user-defined data types and both hold a bunch of different data types. 

9.File Handling ==> File Handling involves management of files. Files are a collection of data that is stored in a disk with a name and a directory path. 
                    Files contain input as well as output streams that are used for reading and writing data respectively.			
                    
					Stream ==> Stream is basically the sequence of byte (Passing through the communition path between hardisk to Ram).
					Input Stream ==> File Reading Operation is called input stream
					OutPut stream ==> File Writting Operation is called Output stream.
					NameSpace ==> System.IO.
					
					
10.DirectoryInfo ==> DirectoryInfo class is a part of System.IO namespace. It is used to create, delete and move directory. 
                     It provides methods to perform operations related to directory and subdirectory. 
					 It is a sealed class so, we cannot inherit it.
					 
11.File Stream ==> The FileStream is a class used for reading and writing files in C#. It is part of the System.IO namespace. 
                   To manipulate files using FileStream, you need to create an object of FileStream class. 
                   This object has four parameters; the Name of the File, FileMode, FileAccess, and FileShare. The Syntax to declare a FileStream object is given as	
				   
		Syntax ==> FileStream fileObj = new FileStream(file Name/Path, FileMode.field, FileAccess.field, FileShare.field);		   
				
12.Stream Writer ==> C# StreamWriter class is used to write characters to a stream in specific encoding. It inherits TextWriter class. 
                     It provides overloaded write() and writeln() methods to write data into file.
					 
13.Stream Reader ==> C# StreamReader class is used to read string from the stream. 
                     It inherits TextReader class. It provides Read() and ReadLine() methods to read data from the stream.
					 
14.Boxing ==> 		Converting a value type to a reference type is called called boxing.
   Example ==>      int a = 10;
                    object obj = a; (Boxing)

15.UnBoxing ==>     converting a reference type to a value type is called unboxing in C#.			 
   Example  ==>     int a = 10;
                    object obj = a;
					int b = (int) obj; (UnBoxing)
					
					
16.GUID ==>  We use GUID for unique identifier. Now a question arise if we already have primary key than why we use Globally Unique Identifier(GUID). 
             we use GUID because it have very low probability of being duplicated as it is 128-bit integer(16 bytes) 
             which allow to use GUID across all databse and computer without data collision.

17.Is keyword ==> The is operator is used to check if the run-time type of an object is compatible with the given type or not. 
                  It returns true if the given object is of the same type otherwise, return false. It also returns false for null objects.
				  
18. As Keyword ==> The as operator is used to perform conversion between compatible reference types or Nullable types. 
                   This operator returns the object when they are compatible with the given type and return null 
				   if the conversion is not possible instead of raising an exception.				  
				   
19.Null Coalesce Operator (??) ==> The ?? operator is also known as the null-coalescing operator. 
                                   It returns the left side operand if the operand is not null else it returns the right side operand 				   
								   
								   
20.Serilization ==> In C#, serialization is the process of converting object into byte stream so that it can be saved to memory, file or database

     Type of Serilization ==> 1. Serilization of Binary
                              2. Serilization of XML
                              3. Serilization of Json

21.Deserilazation ==> The reverse process of serialization is called deserialization. Serialization is internally used in remote applications.

22.Concrete Class ==> Concrete class is nothing but normal class, we can use as a base class or may not. 
                      Not compulsory, it can't contain abstract methods. we can create object and work with this class. 
                      A concrete class is used to define a useful object that can be instantiated as an automatic variable on the program stack.							  
					  
23. Dependency Injection ==> Dependency Injection (DI) is a software design pattern that allows us to develop loosely coupled code.
                       
     	Dependency Injection is sum of = loosely coupled code + tight coupled code;

   Loosely coupled code ==> Loose coupling is a design goal that seeks to reduce the inter-dependencies between components of a system with the goal of reducing 
                            the risk that changes in one component will require changes in any other component. 
		                    Loose coupling is a much more generic concept intended to increase the flexibility of a system, 
						    make it more maintainable, and makes the entire framework more "stable"		
							
	tight coupled code ==> A Tightly Coupled Object is an object that needs to know quite a bit about other objects and are usually highly dependent on each other's interfaces. 
	                       Changing one object in a tightly coupled application often requires changes to a number of other objects. In a small application we can easily identify 
						   the changes and there is less chance to miss anything. But in large applications these inter-dependencies are not always known by every programmer or 
						   there is a chance of overlooking changes. But each set of loosely coupled objects are not dependent on each other. (Stackoverfow-Jom George).

	There Are Three Type of DI in c# ==> 
	                       1.Constructure Injection
						   2.Setter or Property Injection
						   3.Method Injection
						   
23.1 Constructure Injection ==> Dependency Injection is done by supplying the DEPENDENCY through the class's constructor when creating the instance of that class. 
                                The injected component can be used anywhere within the class. 
                                Recommended to use when the injected dependency, you are using across the class methods.
								
23.2 Property Injection ==> In Property Dependency Injection, the Injector needs to Inject the Dependency Object through a public property of the client class.

23.3 Method Injection ==>  Method Injection supplies a consumer with a Dependency by passing it as method argument on a method called outside the Composition Root.
                             								
	
24.ENUM (ENUMERATION) ==> Enum is a set of Constant.
                          An enum is a special "class" that represents a group of constants (unchangeable/read-only variables).

25.Async And Wait ==> The async keyword turns a method into an async method, which allows you to use the await keyword in its body

     Async ==> An async keyword is a method that performs asynchronous tasks such as fetching data from a database, reading a file, etc, they can be marked as “async”.
     Wait ==> Whereas await keyword making  “await” to a statement means suspending the execution of the async method it is residing in until the asynchronous task completes.

         
